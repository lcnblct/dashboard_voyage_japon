# Page de l'assistant IA avec Groq
import streamlit as st
import groq
import json
from datetime import datetime
from data.models import get_default_travel_profile
from data.storage import sync_state

# Configuration de l'API Groq depuis les secrets Streamlit
GROQ_API_KEY = st.secrets.get("GROQ_API_KEY", "")

def display_ai_assistant():
    """Affiche la page de l'assistant IA"""
    
    # V√©rification de la cl√© API
    if not GROQ_API_KEY:
        st.error("‚ùå Cl√© API Groq non configur√©e. Veuillez ajouter GROQ_API_KEY dans .streamlit/secrets.toml")
        st.stop()
    
    # Initialisation de l'√©tat
    if 'ai_messages' not in st.session_state:
        st.session_state.ai_messages = []
        st.session_state.ai_client = None
    
    data = st.session_state.data
    profile = data.get("travel_profile", get_default_travel_profile())
    
    # CSS personnalis√©
    st.markdown("""
    <style>
    .main-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    .ai-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    .user-message {
        background-color: #dbeafe;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #3b82f6;
    }
    .ai-message {
        background-color: #f3f4f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #10b981;
    }
    .suggestion-chip {
        display: inline-block;
        background-color: #e5e7eb;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        margin: 0.25rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .suggestion-chip:hover {
        background-color: #d1d5db;
    }
    .stButton > button {
        border-radius: 0.5rem;
        font-weight: 600;
        padding: 0.5rem 1.5rem;
    }
    .context-info {
        background-color: #fef3c7;
        border: 1px solid #f59e0b;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ Assistant IA Voyage Japon</h1>
        <p style="font-size: 1.2rem; color: #6b7280;">G√©n√©rez des id√©es personnalis√©es avec l'IA</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Affichage du contexte du voyage
    display_travel_context(profile)
    
    # Interface de chat
    display_chat_interface(profile)
    
    # Suggestions rapides
    display_quick_suggestions(profile)

def display_travel_context(profile):
    """Affiche le contexte du voyage actuel"""
    st.markdown("""
    <div class="context-info">
        <h4>üìã Contexte de votre voyage :</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        **üë• Voyageurs :** {profile.get('travelers', 'Non sp√©cifi√©')}
        
        **üìÖ Dates :** {profile.get('arrival_date', 'Non sp√©cifi√©')} ‚Üí {profile.get('departure_date', 'Non sp√©cifi√©')}
        
        **üí∞ Budget :** {profile.get('budget', 'Non sp√©cifi√©')}
        """)
    
    with col2:
        st.markdown(f"""
        **üéØ Priorit√© :** {profile.get('priority_1', 'Non sp√©cifi√©')}
        
        **‚ö° Rythme :** {profile.get('travel_rhythm', 'Non sp√©cifi√©')}/5
        
        **üè® H√©bergement :** {profile.get('accommodation_style', 'Non sp√©cifi√©')}
        """)
    
    with col3:
        st.markdown(f"""
        **üçú Cuisine :** {profile.get('cuisine_preferences', 'Non sp√©cifi√©')}
        
        **‚õ©Ô∏è Temples :** {profile.get('temples_interest', 'Non sp√©cifi√©')}/5
        
        **üì∫ Manga/Anime :** {profile.get('manga_anime', 'Non sp√©cifi√©')}/5
        """)

def display_chat_interface(profile):
    """Affiche l'interface de chat avec l'IA"""
    
    st.markdown("""
    <div class="ai-card">
        <h3>üí¨ Chat avec l'Assistant IA</h3>
        <p>Posez vos questions sur votre voyage au Japon. L'IA aura acc√®s √† votre profil pour des r√©ponses personnalis√©es.</p>
        <div style="background-color: #eff6ff; border: 1px solid #dbeafe; border-radius: 0.5rem; padding: 0.75rem; margin-top: 1rem;">
            <p style="margin: 0; font-size: 0.9rem; color: #1e40af;">
                <strong>üåê Capacit√©s web :</strong> L'IA peut rechercher des informations en temps r√©el (horaires, prix, avis, √©v√©nements) et ex√©cuter des calculs pour vous aider.
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Zone de saisie
    user_input = st.text_area(
        "Votre question :",
        placeholder="Ex: Peux-tu me sugg√©rer un itin√©raire pour 3 jours √† Tokyo ? Ou: Quels sont les meilleurs restaurants de ramen √† Kyoto ?",
        height=100,
        key="user_input"
    )
    
    # Boutons d'action
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üöÄ Envoyer", type="primary"):
            if user_input.strip():
                send_message_to_ai(user_input, profile)
                st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è Effacer l'historique"):
            st.session_state.ai_messages = []
            st.rerun()
    
    with col3:
        if st.button("üìã Exporter la conversation"):
            export_conversation()
    
    # Affichage de l'historique des messages
    display_chat_history()

def display_quick_suggestions(profile):
    """Affiche des suggestions rapides"""
    
    st.markdown("""
    <div class="ai-card">
        <h3>üí° Suggestions rapides</h3>
        <p>Cliquez sur une suggestion pour l'envoyer automatiquement :</p>
    </div>
    """, unsafe_allow_html=True)
    
    suggestions = [
        "Peux-tu me proposer un itin√©raire optimis√© pour mon profil ?",
        "Quels sont les meilleurs moments pour visiter les temples de Kyoto ?",
        "Sugg√®re-moi des restaurants authentiques √† Tokyo avec des avis r√©cents",
        "Comment optimiser mon budget pour ce voyage ?",
        "Quelles sont les activit√©s incontournables selon mes go√ªts ?",
        "Peux-tu me conseiller sur les transports au Japon ?",
        "Sugg√®re-moi des activit√©s en cas de pluie",
        "Quels sont les quartiers √† ne pas manquer √† Osaka ?",
        "V√©rifie les horaires actuels du Shinkansen Tokyo-Kyoto",
        "Trouve des informations sur les festivals au Japon en mai",
        "Quels sont les prix actuels du JR Pass ?",
        "Sugg√®re-moi des ryokan avec onsen pr√®s de Tokyo"
    ]
    
    # Affichage des suggestions en colonnes
    cols = st.columns(3)
    for i, suggestion in enumerate(suggestions):
        with cols[i % 3]:
            if st.button(suggestion, key=f"suggestion_{i}"):
                send_message_to_ai(suggestion, profile)
                st.rerun()

def send_message_to_ai(user_message, profile):
    """Envoie un message √† l'IA Groq et r√©cup√®re la r√©ponse"""
    
    try:
        # Initialisation du client Groq
        if st.session_state.ai_client is None:
            st.session_state.ai_client = groq.Groq(api_key=GROQ_API_KEY)
        
        # Ajout du message utilisateur √† l'historique
        st.session_state.ai_messages.append({
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().strftime("%H:%M")
        })
        
        # Construction du contexte pour l'IA
        context = build_ai_context(profile)
        
        # Pr√©paration des messages pour l'IA
        messages = [
            {
                "role": "system",
                "content": f"""Tu es un expert du voyage au Japon, sp√©cialis√© dans la cr√©ation d'exp√©riences personnalis√©es. 

Tu as acc√®s aux informations suivantes sur le voyageur :

{context}

CAPACIT√âS SP√âCIALES :
- Tu peux rechercher des informations en temps r√©el sur le web
- Tu peux acc√©der aux sites officiels japonais, guides de voyage, horaires de transport, etc.
- Tu peux ex√©cuter du code Python pour des calculs (budget, distances, conversions)

UTILISE TES CAPACIT√âS WEB POUR :
- V√©rifier les horaires actuels des trains et m√©tros
- Trouver les meilleurs restaurants avec des avis r√©cents
- Obtenir des informations sur les √©v√©nements en cours au Japon
- V√©rifier les prix actuels des billets et pass
- Trouver des informations sur les festivals et √©v√©nements saisonniers
- Obtenir des conseils m√©t√©o en temps r√©el

R√©ponds de mani√®re d√©taill√©e, pratique et enthousiaste. Sois cr√©atif et propose des suggestions originales qui correspondent au profil du voyageur. 
Utilise un ton amical et encourageant. Donne des conseils concrets et des recommandations sp√©cifiques.

Si tu utilises des informations trouv√©es sur le web, cite tes sources."""
            }
        ]
        
        # Ajout de l'historique r√©cent (derniers 10 messages)
        recent_messages = st.session_state.ai_messages[-10:]
        for msg in recent_messages:
            if msg["role"] == "user":
                messages.append({"role": "user", "content": msg["content"]})
            elif msg["role"] == "assistant":
                messages.append({"role": "assistant", "content": msg["content"]})
        
        # Appel √† l'API Groq avec compound-beta pour acc√®s web
        with st.spinner("ü§ñ L'IA r√©fl√©chit et recherche des informations en temps r√©el..."):
            response = st.session_state.ai_client.chat.completions.create(
                model="compound-beta",
                messages=messages,
                temperature=0.7,
                max_tokens=2000,
                search_settings={
                    "include_domains": [
                        "japan-guide.com",
                        "japan.travel",
                        "japanrailpass.net",
                        "hyperdia.com",
                        "tabelog.com",
                        "timeout.com",
                        "lonelyplanet.com",
                        "wikitravel.org",
                        "*.jp"
                    ],
                    "exclude_domains": [
                        "*.wikipedia.org"
                    ]
                }
            )
        
        # R√©cup√©ration de la r√©ponse
        ai_response = response.choices[0].message.content
        
        # V√©rification des outils utilis√©s
        executed_tools = getattr(response.choices[0].message, 'executed_tools', [])
        tools_used = []
        
        if executed_tools:
            for tool in executed_tools:
                if tool.get('type') == 'web_search':
                    tools_used.append("üîç Recherche web")
                elif tool.get('type') == 'code_execution':
                    tools_used.append("üíª Ex√©cution de code")
        
        # Ajout de la r√©ponse √† l'historique
        st.session_state.ai_messages.append({
            "role": "assistant",
            "content": ai_response,
            "timestamp": datetime.now().strftime("%H:%M"),
            "tools_used": tools_used
        })
        
    except Exception as e:
        st.error(f"Erreur lors de la communication avec l'IA : {str(e)}")
        st.session_state.ai_messages.append({
            "role": "assistant",
            "content": "D√©sol√©, j'ai rencontr√© une erreur technique. Veuillez r√©essayer.",
            "timestamp": datetime.now().strftime("%H:%M")
        })

def build_ai_context(profile):
    """Construit le contexte pour l'IA bas√© sur le profil"""
    
    context = f"""
INFORMATIONS DU VOYAGE :
- Voyageurs : {profile.get('travelers', 'Non sp√©cifi√©')}
- Dates : {profile.get('arrival_date', 'Non sp√©cifi√©')} ‚Üí {profile.get('departure_date', 'Non sp√©cifi√©')}
- Budget : {profile.get('budget', 'Non sp√©cifi√©')}
- Exp√©rience : {profile.get('experience', 'Non sp√©cifi√©')}
- A√©roports : {profile.get('arrival_airport', 'Non sp√©cifi√©')} ‚Üí {profile.get('departure_airport', 'Non sp√©cifi√©')}

PR√âF√âRENCES :
- Orientation g√©ographique : {profile.get('geographic_orientation', 'Non sp√©cifi√©')}
- Priorit√© N¬∞1 : {profile.get('priority_1', 'Non sp√©cifi√©')}
- Rythme du voyage : {profile.get('travel_rhythm', 'Non sp√©cifi√©')}/5
- Style d'h√©bergement : {profile.get('accommodation_style', 'Non sp√©cifi√©')}
- Pr√©f√©rences culinaires : {profile.get('cuisine_preferences', 'Non sp√©cifi√©')}
- Tol√©rance √† la foule : {profile.get('crowd_tolerance', 'Non sp√©cifi√©')}/5

CENTRES D'INT√âR√äT :
- Temples et sanctuaires : {profile.get('temples_interest', 'Non sp√©cifi√©')}/5
- Manga/Anime : {profile.get('manga_anime', 'Non sp√©cifi√©')}/5
- Jeux vid√©o : {profile.get('gaming', 'Non sp√©cifi√©')}/5
- Nature : {profile.get('nature_importance', 'Non sp√©cifi√©')}/5
- Mus√©es : {profile.get('museums_interest', 'Non sp√©cifi√©')}/5
- Photographie : {profile.get('photography', 'Non sp√©cifi√©')}/5

AUTRES INFORMATIONS :
- R√©servations actuelles : {profile.get('current_reservations', 'Aucune')}
- Contraintes : {profile.get('constraints', 'Aucune')}
- Int√©r√™ts sp√©cifiques : {profile.get('specific_interests', 'Aucun')}
"""
    
    return context

def display_chat_history():
    """Affiche l'historique des messages"""
    
    if not st.session_state.ai_messages:
        st.info("üí¨ Commencez la conversation en envoyant un message !")
        return
    
    st.markdown("### üìú Historique de la conversation")
    
    for message in st.session_state.ai_messages:
        if message["role"] == "user":
            st.markdown(f"""
            <div class="user-message">
                <strong>üë§ Vous ({message['timestamp']}) :</strong><br>
                {message['content']}
            </div>
            """, unsafe_allow_html=True)
        else:
            # Affichage des outils utilis√©s si disponibles
            tools_info = ""
            if message.get("tools_used"):
                tools_info = f"<br><small style='color: #6b7280;'>üõ†Ô∏è Outils utilis√©s : {', '.join(message['tools_used'])}</small>"
            
            st.markdown(f"""
            <div class="ai-message">
                <strong>ü§ñ Assistant ({message['timestamp']}) :</strong><br>
                {message['content']}
                {tools_info}
            </div>
            """, unsafe_allow_html=True)

def export_conversation():
    """Exporte la conversation en fichier texte"""
    
    if not st.session_state.ai_messages:
        st.warning("Aucune conversation √† exporter.")
        return
    
    # Construction du contenu du fichier
    content = "=== Conversation avec l'Assistant IA Voyage Japon ===\n\n"
    content += f"Date : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}\n\n"
    
    for message in st.session_state.ai_messages:
        role = "Vous" if message["role"] == "user" else "Assistant IA"
        content += f"[{message['timestamp']}] {role} :\n{message['content']}\n\n"
    
    # T√©l√©chargement
    st.download_button(
        label="üì• T√©l√©charger la conversation",
        data=content,
        file_name=f"conversation-ia-japon-{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt",
        mime="text/plain"
    )

# Fonction pour tester la connexion √† l'API
def test_groq_connection():
    """Teste la connexion √† l'API Groq"""
    try:
        client = groq.Groq(api_key=GROQ_API_KEY)
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": "Bonjour"}],
            max_tokens=10
        )
        return True
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API Groq : {str(e)}")
        return False 