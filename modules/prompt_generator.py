# Page du g√©n√©rateur de prompt ultime
import streamlit as st
from datetime import datetime
from data.models import get_default_travel_profile
from data.storage import sync_state

def display_prompt_generator():
    """Affiche la page du g√©n√©rateur de prompt ultime"""
    
    # Initialisation de l'√©tat
    if 'prompt_state' not in st.session_state:
        st.session_state.prompt_state = 'intro'
    
    data = st.session_state.data
    profile = data.get("travel_profile", get_default_travel_profile())
    
    # CSS personnalis√©
    st.markdown("""
    <style>
    .main-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    .prompt-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    .prompt-text {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
        max-height: 400px;
        overflow-y: auto;
    }
    .stButton > button {
        border-radius: 0.5rem;
        font-weight: 600;
        padding: 0.5rem 1.5rem;
    }
    .info-box {
        background-color: #eff6ff;
        border: 1px solid #dbeafe;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    .warning-box {
        background-color: #fef3c7;
        border: 1px solid #f59e0b;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>üéØ G√©n√©rateur de Prompt Ultime</h1>
        <p style="font-size: 1.2rem; color: #6b7280;">Cr√©ez le prompt parfait pour votre guide de voyage personnalis√©</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Navigation entre les √©tapes
    if st.session_state.prompt_state == 'intro':
        display_prompt_intro()
    elif st.session_state.prompt_state == 'customize':
        display_prompt_customize(profile)
    elif st.session_state.prompt_state == 'result':
        display_prompt_result()

def display_prompt_intro():
    """Affiche l'introduction du g√©n√©rateur de prompt"""
    
    st.markdown("""
    <div class="prompt-card">
        <h3>üöÄ Bienvenue dans le G√©n√©rateur de Prompt Ultime</h3>
        <p>Ce g√©n√©rateur va cr√©er un prompt d√©taill√© et structur√© bas√© sur votre profil de voyage. 
        Ce prompt pourra ensuite √™tre utilis√© avec ChatGPT, Claude ou tout autre IA pour g√©n√©rer un guide de voyage personnalis√©.</p>
        
        <div class="info-box">
            <h4>üìã Ce que fait ce g√©n√©rateur :</h4>
            <ul>
                <li>Analyse votre profil de voyage complet</li>
                <li>Structure toutes vos pr√©f√©rences et contraintes</li>
                <li>Cr√©e un prompt d√©taill√© pour l'IA</li>
                <li>Permet la personnalisation du niveau de d√©tail</li>
                <li>G√©n√®re un fichier t√©l√©chargeable</li>
            </ul>
        </div>
        
        <div class="warning-box">
            <h4>‚ö†Ô∏è Important :</h4>
            <p>Assurez-vous d'avoir compl√©t√© votre profil de voyage avant de g√©n√©rer le prompt. 
            Plus votre profil est d√©taill√©, plus le guide g√©n√©r√© sera personnalis√©.</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col2:
        if st.button("üéØ Commencer la g√©n√©ration", type="primary"):
            st.session_state.prompt_state = 'customize'
            st.rerun()

def display_prompt_customize(profile):
    """Affiche l'√©tape de personnalisation du prompt"""
    
    st.markdown("""
    <div class="prompt-card">
        <h3>‚öôÔ∏è Personnalisation du Prompt</h3>
        <p>V√©rifiez et ajustez les informations de votre profil qui seront utilis√©es dans le prompt :</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Informations de base
    st.subheader("üë• Informations de base")
    col1, col2 = st.columns(2)
    
    with col1:
        travelers = st.text_input("Voyageurs", value=profile.get('travelers', ''))
        arrival_date = st.date_input("Date d'arriv√©e", value=profile.get('arrival_date'))
        departure_date = st.date_input("Date de d√©part", value=profile.get('departure_date'))
        budget = st.text_input("Budget", value=profile.get('budget', ''))
    
    with col2:
        experience = st.selectbox("Exp√©rience", 
            ["Premier voyage", "D√©j√† visit√©", "Expert"], 
            index=["Premier voyage", "D√©j√† visit√©", "Expert"].index(profile.get('experience', 'Premier voyage')))
        arrival_airport = st.text_input("A√©roport d'arriv√©e", value=profile.get('arrival_airport', ''))
        departure_airport = st.text_input("A√©roport de d√©part", value=profile.get('departure_airport', ''))
    
    # Pr√©f√©rences g√©ographiques
    st.subheader("üó∫Ô∏è Pr√©f√©rences g√©ographiques")
    col1, col2 = st.columns(2)
    
    with col1:
        geographic_orientation = st.text_area("Orientation g√©ographique", 
            value=profile.get('geographic_orientation', ''), height=100)
        priority_1 = st.text_input("Priorit√© N¬∞1", value=profile.get('priority_1', ''))
        travel_rhythm = st.slider("Rythme du voyage", 1, 5, profile.get('travel_rhythm', 3))
    
    with col2:
        crowd_tolerance = st.slider("Tol√©rance √† la foule", 1, 5, profile.get('crowd_tolerance', 3))
        accommodation_style = st.text_input("Style d'h√©bergement", value=profile.get('accommodation_style', ''))
        cuisine_preferences = st.text_input("Pr√©f√©rences culinaires", value=profile.get('cuisine_preferences', ''))
    
    # Centres d'int√©r√™t
    st.subheader("üéØ Centres d'int√©r√™t")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        temples_interest = st.slider("Temples et sanctuaires", 1, 5, profile.get('temples_interest', 3))
        manga_anime = st.slider("Manga/Anime", 1, 5, profile.get('manga_anime', 3))
        gaming = st.slider("Jeux vid√©o", 1, 5, profile.get('gaming', 3))
    
    with col2:
        nature_importance = st.slider("Nature", 1, 5, profile.get('nature_importance', 3))
        museums_interest = st.slider("Mus√©es", 1, 5, profile.get('museums_interest', 3))
        photography = st.slider("Photographie", 1, 5, profile.get('photography', 3))
    
    with col3:
        onsen_interest = st.slider("Onsen", 1, 5, profile.get('onsen_interest', 3))
        shopping_interest = st.slider("Shopping", 1, 5, profile.get('shopping_interest', 3))
        nightlife_interest = st.slider("Vie nocturne", 1, 5, profile.get('nightlife_interest', 3))
    
    # Autres informations
    st.subheader("üìù Autres informations")
    current_reservations = st.text_area("R√©servations actuelles", 
        value=profile.get('current_reservations', ''), height=80)
    constraints = st.text_area("Contraintes", 
        value=profile.get('constraints', ''), height=80)
    specific_interests = st.text_area("Int√©r√™ts sp√©cifiques", 
        value=profile.get('specific_interests', ''), height=80)
    
    # Options de personnalisation du prompt
    st.subheader("üé® Options du prompt")
    col1, col2 = st.columns(2)
    
    with col1:
        detail_level = st.selectbox("Niveau de d√©tail", 
            ["Basique", "Standard", "D√©taill√©", "Tr√®s d√©taill√©"], 
            index=2)
        prompt_tone = st.selectbox("Ton du prompt", 
            ["Professionnel", "Amical", "Enthousiaste", "Formel"], 
            index=1)
    
    with col2:
        include_alternatives = st.checkbox("Inclure des alternatives", value=True)
        include_budget_tips = st.checkbox("Inclure des conseils budget", value=True)
        important_advice = st.text_area("Conseils importants √† ajouter", 
            value="", height=80, 
            placeholder="Ex: Privil√©gier les transports en commun, √©viter les p√©riodes de f√™tes...")
    
    # Boutons d'action
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîô Retour"):
            st.session_state.prompt_state = 'intro'
            st.rerun()
    
    with col2:
        if st.button("üé≤ G√©n√©rer avec donn√©es al√©atoires"):
            generate_random_prompt()
            st.session_state.prompt_state = 'result'
            st.rerun()
    
    with col3:
        if st.button("üöÄ G√©n√©rer le prompt", type="primary"):
            # Mise √† jour du profil avec les nouvelles valeurs
            updated_profile = {
                'travelers': travelers,
                'arrival_date': arrival_date,
                'departure_date': departure_date,
                'budget': budget,
                'experience': experience,
                'arrival_airport': arrival_airport,
                'departure_airport': departure_airport,
                'geographic_orientation': geographic_orientation,
                'priority_1': priority_1,
                'travel_rhythm': travel_rhythm,
                'crowd_tolerance': crowd_tolerance,
                'accommodation_style': accommodation_style,
                'cuisine_preferences': cuisine_preferences,
                'temples_interest': temples_interest,
                'manga_anime': manga_anime,
                'gaming': gaming,
                'nature_importance': nature_importance,
                'museums_interest': museums_interest,
                'photography': photography,
                'onsen_interest': onsen_interest,
                'shopping_interest': shopping_interest,
                'nightlife_interest': nightlife_interest,
                'current_reservations': current_reservations,
                'constraints': constraints,
                'specific_interests': specific_interests
            }
            
            # Sauvegarde du profil mis √† jour
            data = st.session_state.data
            data["travel_profile"] = updated_profile
            sync_state()
            
            # G√©n√©ration du prompt
            st.session_state.generated_prompt = generate_custom_prompt(
                updated_profile, detail_level, prompt_tone, 
                include_alternatives, include_budget_tips, important_advice
            )
            st.session_state.prompt_state = 'result'
            st.rerun()

def display_prompt_result():
    """Affiche le r√©sultat du prompt g√©n√©r√©"""
    
    if 'generated_prompt' not in st.session_state:
        st.error("Aucun prompt g√©n√©r√©. Veuillez retourner √† l'√©tape pr√©c√©dente.")
        if st.button("üîô Retour"):
            st.session_state.prompt_state = 'customize'
            st.rerun()
        return
    
    st.markdown("""
    <div class="prompt-card">
        <h3>‚úÖ Prompt Ultime G√©n√©r√©</h3>
        <p>Voici votre prompt personnalis√©. Vous pouvez le copier et l'utiliser avec ChatGPT, Claude ou tout autre IA pour g√©n√©rer votre guide de voyage.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Affichage du prompt
    st.subheader("üìù Votre Prompt")
    st.markdown(f"""
    <div class="prompt-text">
{st.session_state.generated_prompt}
    </div>
    """, unsafe_allow_html=True)
    
    # Boutons d'action
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîô Modifier"):
            st.session_state.prompt_state = 'customize'
            st.rerun()
    
    with col2:
        if st.button("üìã Copier dans le presse-papiers"):
            st.write("‚úÖ Prompt copi√© !")
            st.code(st.session_state.generated_prompt)
    
    with col3:
        download_prompt()

def generate_custom_prompt(profile, detail_level, prompt_tone, include_alternatives, include_budget_tips, important_advice):
    """G√©n√®re un prompt personnalis√© bas√© sur le profil"""
    
    # R√©cup√©ration du profil complet depuis session_state
    data = st.session_state.data
    full_profile = data.get("travel_profile", profile)
    
    # Descriptions bas√©es sur les scores
    rhythm_desc = get_rhythm_description(profile.get('travel_rhythm', 3))
    crowd_desc = get_crowd_description(profile.get('crowd_tolerance', 3))
    
    # Construction du prompt
    prompt = f"""# R√îLE ET OBJECTIF
Tu es un expert du voyage au Japon, sp√©cialis√© dans la cr√©ation de guides de voyage personnalis√©s. Ta mission est de cr√©er un guide de voyage COMPLET et D√âTAILL√â en te basant EXCLUSIVEMENT sur le profil voyageur fourni ci-dessous. 

IMPORTANT : Ce prompt contient toutes les informations n√©cessaires pour cr√©er un guide sur-mesure. Tu dois respecter scrupuleusement les pr√©f√©rences, contraintes et centres d'int√©r√™t sp√©cifi√©s.

---

# PROFIL VOYAGEUR COMPLET

## INFORMATIONS DE BASE
- **Voyageurs :** {profile.get('travelers', 'Non sp√©cifi√©')}
- **Dates :** {profile.get('arrival_date', 'Non sp√©cifi√©')} ‚Üí {profile.get('departure_date', 'Non sp√©cifi√©')}
- **Budget :** {profile.get('budget', 'Non sp√©cifi√©')}
- **Exp√©rience :** {profile.get('experience', 'Non sp√©cifi√©')}
- **A√©roports :** {profile.get('arrival_airport', 'Non sp√©cifi√©')} ‚Üí {profile.get('departure_airport', 'Non sp√©cifi√©')}

## PR√âF√âRENCES G√âOGRAPHIQUES
- **Orientation :** {profile.get('geographic_orientation', 'Non sp√©cifi√©')}
- **Priorit√© N¬∞1 :** {profile.get('priority_1', 'Non sp√©cifi√©')}

## RYTHME ET STYLE
- **Rythme du voyage :** {profile.get('travel_rhythm', 'Non sp√©cifi√©')}/5 ({rhythm_desc})
- **Tol√©rance √† la foule :** {profile.get('crowd_tolerance', 'Non sp√©cifi√©')}/5 ({crowd_desc})
- **Style d'h√©bergement :** {profile.get('accommodation_style', 'Non sp√©cifi√©')}
- **Pr√©f√©rences culinaires :** {profile.get('cuisine_preferences', 'Non sp√©cifi√©')}

## CENTRES D'INT√âR√äT (Scores 1-5)
- **Temples et sanctuaires :** {profile.get('temples_interest', 'Non sp√©cifi√©')}/5
- **Manga/Anime :** {profile.get('manga_anime', 'Non sp√©cifi√©')}/5
- **Jeux vid√©o :** {profile.get('gaming', 'Non sp√©cifi√©')}/5
- **Nature :** {profile.get('nature_importance', 'Non sp√©cifi√©')}/5
- **Mus√©es :** {profile.get('museums_interest', 'Non sp√©cifi√©')}/5
- **Photographie :** {profile.get('photography', 'Non sp√©cifi√©')}/5
- **Onsen :** {profile.get('onsen_interest', 'Non sp√©cifi√©')}/5
- **Shopping :** {profile.get('shopping_interest', 'Non sp√©cifi√©')}/5
- **Vie nocturne :** {profile.get('nightlife_interest', 'Non sp√©cifi√©')}/5

## AUTRES INFORMATIONS
- **R√©servations actuelles :** {profile.get('current_reservations', 'Aucune')}
- **Contraintes :** {profile.get('constraints', 'Aucune')}
- **Int√©r√™ts sp√©cifiques :** {profile.get('specific_interests', 'Aucun')}

## R√âPONSES AU QUESTIONNAIRE D√âTAILL√â
{get_questionnaire_answers(full_profile)}

---

# MISSION : CR√âER UN GUIDE DE VOYAGE COMPLET

En te basant EXCLUSIVEMENT sur ce profil, cr√©e un guide de voyage d√©taill√© et pratique. Voici la structure attendue :

## 1. TITRE ET SYNTH√àSE
- Donne un titre accrocheur qui refl√®te l'esprit du voyage
- R√©dige une synth√®se de 2-3 paragraphes qui justifie les choix d'itin√©raire

## 2. ITIN√âRAIRE GLOBAL
- Pr√©sente les grandes √©tapes avec le nombre de nuits
- Justifie chaque choix par rapport au profil

## 3. PLANNING JOUR PAR JOUR
Pour CHAQUE jour, fournis :
- **Th√®me de la journ√©e**
- **Matin** : Activit√©s d√©taill√©es avec horaires
- **Midi** : Suggestions de restaurants adapt√©es aux go√ªts
- **Apr√®s-midi** : Activit√©s et visites
- **Soir** : D√Æner et activit√©s nocturnes
- **Conseils pratiques** : Horaires, r√©servations, alternatives

## 4. CONSEILS PRATIQUES PERSONNALIS√âS
- Transport : Pass recommand√©s, cartes, applications
- Budget : Estimations d√©taill√©es par activit√©
- Savoir-vivre : Coutumes locales importantes
- R√©servations : Liens et conseils
- Alternatives : Plans B en cas de probl√®me
- Lexique : Mots utiles en japonais

## 5. RECOMMANDATIONS SP√âCIALES
- Activit√©s "coup de c≈ìur" selon le profil
- Lieux moins connus qui correspondent aux go√ªts
- Conseils pour optimiser l'exp√©rience

**TON :** {prompt_tone.lower()}, enthousiaste, pratique et encourageant.

**D√âTAIL :** {detail_level}

**CONSEILS IMPORTANTS :** {important_advice if important_advice else "Aucun conseil sp√©cifique ajout√©."}

Maintenant, cr√©e ce guide de voyage personnalis√© en respectant scrupuleusement ce profil.
"""
    
    return prompt

def generate_random_prompt():
    """G√©n√®re un prompt avec des donn√©es al√©atoires pour d√©monstration"""
    
    import random
    
    # Donn√©es al√©atoires coh√©rentes
    random_data = {
        'travelers': 'Couple de 30 ans',
        'arrival_date': '2024-05-15',
        'departure_date': '2024-05-25',
        'budget': '4000‚Ç¨ pour 2 personnes',
        'experience': 'Premier voyage',
        'arrival_airport': 'Narita',
        'departure_airport': 'Haneda',
        'geographic_orientation': 'Route d\'Or classique (Tokyo-Kyoto-Osaka)',
        'priority_1': 'La gastronomie sous toutes ses formes',
        'travel_rhythm': 4,
        'crowd_tolerance': 3,
        'accommodation_style': 'M√©lange ryokan et h√¥tels modernes',
        'cuisine_preferences': 'Aventure culinaire totale, street food et restaurants traditionnels',
        'temples_interest': 4,
        'manga_anime': 3,
        'gaming': 2,
        'nature_importance': 3,
        'museums_interest': 4,
        'photography': 5,
        'onsen_interest': 4,
        'shopping_interest': 3,
        'nightlife_interest': 4,
        'current_reservations': 'Aucune',
        'constraints': 'Pas de voiture, privil√©gier les transports en commun',
        'specific_interests': 'Photographie urbaine, onsen, street food'
    }
    
    st.session_state.generated_prompt = generate_custom_prompt(
        random_data, "D√©taill√©", "Enthousiaste", True, True, 
        "Privil√©gier les transports en commun, r√©server les restaurants populaires √† l'avance"
    )

def get_rhythm_description(score):
    """Retourne une description du rythme bas√©e sur le score"""
    descriptions = {
        1: "Tr√®s lent, beaucoup de temps libre",
        2: "Lent, quelques activit√©s par jour",
        3: "Mod√©r√©, √©quilibr√©",
        4: "Rapide, bien rempli",
        5: "Tr√®s rapide, intensif"
    }
    return descriptions.get(score, "Mod√©r√©")

def get_crowd_description(score):
    """Retourne une description de la tol√©rance √† la foule bas√©e sur le score"""
    descriptions = {
        1: "√âviter les foules",
        2: "Pr√©f√©rer les lieux calmes",
        3: "√âquilibr√©",
        4: "Pas de probl√®me avec les foules",
        5: "Rechercher l'ambiance"
    }
    return descriptions.get(score, "√âquilibr√©")

def get_questionnaire_answers(profile):
    """R√©cup√®re les r√©ponses du questionnaire d√©taill√©"""
    # Cette fonction pourrait √™tre √©tendue pour inclure toutes les r√©ponses du questionnaire
    # Pour l'instant, on retourne les informations principales
    return f"""
R√©ponses principales du questionnaire :
- Orientation g√©ographique : {profile.get('geographic_orientation', 'Non sp√©cifi√©')}
- Priorit√© principale : {profile.get('priority_1', 'Non sp√©cifi√©')}
- Rythme de voyage : {profile.get('travel_rhythm', 'Non sp√©cifi√©')}/5
- Style d'h√©bergement : {profile.get('accommodation_style', 'Non sp√©cifi√©')}
- Pr√©f√©rences culinaires : {profile.get('cuisine_preferences', 'Non sp√©cifi√©')}
"""

def download_prompt():
    """Permet de t√©l√©charger le prompt g√©n√©r√©"""
    
    if 'generated_prompt' not in st.session_state:
        st.warning("Aucun prompt √† t√©l√©charger.")
        return
    
    # Nom du fichier avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    filename = f"prompt-voyage-japon-{timestamp}.txt"
    
    # T√©l√©chargement
    st.download_button(
        label="üì• T√©l√©charger le prompt",
        data=st.session_state.generated_prompt,
        file_name=filename,
        mime="text/plain"
    ) 